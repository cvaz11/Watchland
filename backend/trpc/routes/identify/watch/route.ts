import { z } from "zod";
import { publicProcedure } from "../../../create-context";

const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

interface AIIdentificationResponse {
  brand?: string;
  model?: string;
  caseMaterial?: string;
  dialColor?: string;
  braceletType?: string;
  complications?: string[];
  estimatedSize?: string;
  confidence?: string;
  description: string;
}

const AIAnalysisSchema = z.object({
  brand: z.string().optional(),
  model: z.string().optional(),
  caseMaterial: z.string().optional(),
  dialColor: z.string().optional(),
  braceletType: z.string().optional(),
  complications: z.array(z.string()).optional(),
  estimatedSize: z.string().optional(),
  confidence: z.string().optional(),
  description: z.string(),
});

export default publicProcedure
  .input(z.object({ 
    base64Image: z.string(),
    precision: z.enum(['high', 'medium', 'fast']).default('high')
  }))
  .mutation(async ({ input }) => {
    if (!OPENAI_API_KEY) {
      throw new Error('OpenAI API key not configured on server');
    }

    const { base64Image, precision } = input;

    // Adjust model parameters based on precision
    const modelConfig = {
      high: { maxTokens: 1000, temperature: 0.1 },
      medium: { maxTokens: 800, temperature: 0.2 },
      fast: { maxTokens: 500, temperature: 0.3 }
    };

    const config = modelConfig[precision];

    try {
      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: `Voc√™ √© um especialista em rel√≥gios de luxo com 20 anos de experi√™ncia. Analise esta imagem de rel√≥gio com m√°xima precis√£o e identifique:

üîç AN√ÅLISE DETALHADA OBRIGAT√ìRIA:
1. MARCA - Procure logotipos, texto no mostrador, coroa, fecho da pulseira, assinatura
2. MODELO - Identifique caracter√≠sticas distintivas, formato da caixa, subdiais, complica√ß√µes
3. MATERIAL DA CAIXA - A√ßo, ouro amarelo/rosa/branco, tit√¢nio, platina, cer√¢mica, bronze
4. COR DO MOSTRADOR - Seja espec√≠fico: preto, branco, azul navy, verde, prata, champagne, etc.
5. TIPO DE PULSEIRA - A√ßo (oyster, jubilee, presidente), couro, borracha, NATO, mesh
6. COMPLICA√á√ïES - Cron√≥grafo, GMT, data, dia/m√™s, fases da lua, reserva de marcha
7. TAMANHO ESTIMADO - Baseado em propor√ß√µes visuais (36mm, 40mm, 42mm, etc.)
8. CARACTER√çSTICAS ESPECIAIS - Luneta, √≠ndices, ponteiros, textura do mostrador

‚ö° INSTRU√á√ïES CR√çTICAS:
- Se n√£o conseguir identificar com certeza, mencione as possibilidades mais prov√°veis
- Seja honesto sobre o n√≠vel de confian√ßa (alta/m√©dia/baixa)
- Foque em detalhes vis√≠veis na imagem
- Considere √¢ngulo, ilumina√ß√£o e qualidade da foto
- Para marcas famosas (Rolex, Omega, Patek Philippe), seja extra cuidadoso

üìã RESPONDA APENAS EM JSON V√ÅLIDO:
{
  "brand": "marca identificada ou vazio se incerto",
  "model": "modelo espec√≠fico ou vazio se incerto", 
  "caseMaterial": "material da caixa",
  "dialColor": "cor espec√≠fica do mostrador",
  "braceletType": "tipo de pulseira/bracelete",
  "complications": ["lista", "de", "complica√ß√µes", "vis√≠veis"],
  "estimatedSize": "tamanho estimado com unidade",
  "confidence": "alta/m√©dia/baixa",
  "description": "an√°lise detalhada do que voc√™ observa na imagem, incluindo caracter√≠sticas distintivas, estado de conserva√ß√£o, e qualquer detalhe relevante para identifica√ß√£o. Seja espec√≠fico sobre por que voc√™ chegou a essas conclus√µes."
}

IMPORTANTE: Retorne apenas o JSON v√°lido, sem texto adicional antes ou depois.`
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: `data:image/jpeg;base64,${base64Image}`,
                    detail: precision === 'high' ? 'high' : 'low'
                  }
                }
              ]
            }
          ],
          max_tokens: config.maxTokens,
          temperature: config.temperature,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
      }

      const data: OpenAIResponse = await response.json();
      
      if (!data.choices || data.choices.length === 0) {
        throw new Error('Invalid OpenAI API response');
      }

      const completion = data.choices[0].message.content;
      return parseAIResponse(completion);
    } catch (error) {
      console.error('Error in OpenAI analysis:', error);
      throw new Error(
        error instanceof Error 
          ? `Analysis failed: ${error.message}` 
          : 'Unknown error in image analysis'
      );
    }
  });

function parseAIResponse(completion: string) {
  try {
    const jsonMatch = completion.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const analysis: AIIdentificationResponse = JSON.parse(jsonMatch[0]);
      
      // Validate with Zod schema
      const validatedAnalysis = AIAnalysisSchema.parse({
        brand: analysis.brand || undefined,
        model: analysis.model || undefined,
        caseMaterial: analysis.caseMaterial || 'N√£o identificado',
        dialColor: analysis.dialColor || 'N√£o identificado',
        braceletType: analysis.braceletType || 'N√£o identificado',
        complications: Array.isArray(analysis.complications) ? analysis.complications : [],
        estimatedSize: analysis.estimatedSize || 'N√£o determinado',
        confidence: analysis.confidence || 'm√©dia',
        description: analysis.description || completion,
      });

      return validatedAnalysis;
    }
  } catch (parseError) {
    console.warn('Error parsing OpenAI JSON response:', parseError);
  }

  // Fallback response
  return {
    brand: undefined,
    model: undefined,
    caseMaterial: 'An√°lise em andamento',
    dialColor: 'An√°lise em andamento',
    braceletType: 'An√°lise em andamento',
    complications: [],
    estimatedSize: 'An√°lise em andamento',
    confidence: 'm√©dia',
    description: completion,
  };
}